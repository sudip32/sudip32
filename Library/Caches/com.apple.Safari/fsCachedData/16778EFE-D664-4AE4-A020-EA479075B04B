{"success":true,"output":"=> \"Hari\"","result":"Success!","total_points":9000,"next_challenge":{"id":5,"title":"Say Your Name Reversed","number":3,"console":true,"completed":false,"url":"http://tryruby.org/levels/1/challenges/3","path":null,"expirement":false,"possible_points":250,"switch_labs_url":null,"level_number":1,"total_challenges":6,"instructions":"<p>\n  Perfect, you've formed a <var>string</var> from the letters of your name.\n  A string is an ordered set of characters that the computer can process.\n</p>\n<p>\n  Imagine the letters are on a string of laundry line and the quotes\n  are clothespins holding the ends. The quotes mark the beginning\n  and the end of the string, and are required.\n</p>\n<p>\n  Now, let's get to reversing your name.\n</p>\n<p>\n  Type: <code class=\"cmd\">\"Jimmy\".reverse</code>, using your own\n  name where the string goes. (<em>Don't forget the dot!</em>)\n</p>\n"},"id":3,"free_course_free_player":false,"completed_course":true,"course_wrap_up_url":"https://www.codeschool.com/account/courses/try-ruby/wrap_up","expirement":false,"instructions":"<p>\n  Welp, we already know that computers are handy and fast for math.\n</p>\n<p>\n  But what about something <i>really</i> useful. Like, say, seeing\n  the letters of your name reversed!</p>\n<p>\n  To do that super-cool task, let's first get you familiar with text\n  in Ruby. Type your first name in quotes, like this:\n  <code class=\"cmd\">\"Jimmy\"</code>\n</p>\n","title":"Say Your Name","expirement_prompt":"> ","completed_lab":true,"next_level_url":"http://tryruby.org/levels/2","next_challenge_url":"http://tryruby.org/levels/1/challenges/3","number":2,"lab_number":1,"awarded_achievements":null,"challenges":[{"id":91,"title":"Got 15 minutes? Give Ruby a shot right now!","number":0,"instructions":"<p>Ruby is a programming language from Japan (available at <a href=\"http://ruby-lang.org\" target=\"_new\">ruby-lang.org</a>) which is revolutionizing the web. The beauty of Ruby is found in its balance between simplicity and power.</p>\n<p>Try out Ruby code in the prompt on the right. In addition to Ruby's built-in methods, the following commands are available:</p>\n<ul class=\"commands\">\n   <li><code>help</code> &rarr; Starts the 15 minute interactive tutorial. Trust me, it's very basic!</li>\n   <li><code>clear</code> &rarr; Clears the screen. Useful if your browser starts slowing down. Your command history will be remembered.</li>\n   <li><code>next</code> &rarr; Allows you to skip to the next section of a lesson.</li>\n   <li><code>back</code> &rarr; Allows you to return to the previous section of a lesson.</li>\n</ul>\n<p>If you want to save your progress, head on over to <a href='https://www.codeschool.com/' rel='internal'>Code School</a> and sign up for free.  We'll wait for you here.</p>\n","completed":false,"current":false,"url":"http://tryruby.org/levels/1/challenges/0"},{"id":1,"title":"Using the Prompt","number":1,"instructions":"<p>The window to the right is a Ruby prompt.</p>\n<p>Here you'll be able to type a line of Ruby code, hit <var>Enter</var>, and watch it run!</p>\n<p>For your first bit of Ruby, try typing some math, like: <code class=\"cmd\">2 + 6</code></p>\n","completed":true,"current":false,"url":"http://tryruby.org/levels/1/challenges/1"},{"id":3,"title":"Say Your Name","number":2,"instructions":"<p>\n  Welp, we already know that computers are handy and fast for math.\n</p>\n<p>\n  But what about something <i>really</i> useful. Like, say, seeing\n  the letters of your name reversed!</p>\n<p>\n  To do that super-cool task, let's first get you familiar with text\n  in Ruby. Type your first name in quotes, like this:\n  <code class=\"cmd\">\"Jimmy\"</code>\n</p>\n","completed":true,"current":false,"url":"http://tryruby.org/levels/1/challenges/2"},{"id":5,"title":"Say Your Name Reversed","number":3,"instructions":"<p>\n  Perfect, you've formed a <var>string</var> from the letters of your name.\n  A string is an ordered set of characters that the computer can process.\n</p>\n<p>\n  Imagine the letters are on a string of laundry line and the quotes\n  are clothespins holding the ends. The quotes mark the beginning\n  and the end of the string, and are required.\n</p>\n<p>\n  Now, let's get to reversing your name.\n</p>\n<p>\n  Type: <code class=\"cmd\">\"Jimmy\".reverse</code>, using your own\n  name where the string goes. (<em>Don't forget the dot!</em>)\n</p>\n","completed":true,"current":true,"url":"http://tryruby.org/levels/1/challenges/3"},{"id":7,"title":"Counting the Letters","number":4,"instructions":"<p>\n  You have used the <code>reverse</code> <strong>method</strong> on your name!\n</p>\n<p>\n  By enclosing your name in quotes, you made a string. Next, you used\n  a dot to access a hidden list of methods that belong to all strings.\n  In this case, you then called the <code>reverse</code> method, which\n  works on strings to flip the order of the string\u2019s characters. Cool,\n  huh?\n</p>\n<p>\n  Now, let's use a different option which will show us how many letters\n  are in your name. Try typing <code class=\"cmd\">\"Jimmy\".length</code>\n  using your name where the string goes.\n</p>\n","completed":true,"current":false,"url":"http://tryruby.org/levels/1/challenges/4"},{"id":9,"title":"On Repeat","number":5,"instructions":"<p>\n  Now, maybe you're wondering what any of this is actually good for.\n  Have you ever encountered a website that yelled at you for choosing\n  a password that was too short? Turns out, the <code>length</code>\n  property is often what that site uses to check for a correct length.\n</p>\n<p>\n  Let's get crazy now, and multiply your name by 5. Follow the\n  following format: <code class=\"cmd\">\"Jimmy\" * 5</code>\n</p>\n","completed":true,"current":false,"url":"http://tryruby.org/levels/1/challenges/5"}],"nesting_level":0,"extra_output":null,"hide_output":null,"progress":"1.0"}